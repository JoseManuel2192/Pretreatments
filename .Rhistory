geom_line()
mviPlot
mviPlot = ggplot(dataPlot, aes(x = x, y)) +
geom_line()
mviPlot
mviPlot = ggplot(dataPlot, aes(x = x, y = Feat_1)) +
geom_line()
mviPlot
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line()
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line()
mviPlot
View(dataPlot)
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(Feat_1)) +
geom_line(aes(Feat_1.1))
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(Feat_1)) +
geom_line(aes(Feat_1.1))
mviPlot
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(Feat_1))
mviPlot
# Identifying where the missing values are
apply(X, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
dataPlot = cbind(X[,i], Xmvi[i]) %>% add_column(x = 1:nrow(X))
mviPlot = ggplot(x = dataPlot$x) +
geom_line(y = data[,1]) +
geom_line(aes(Feat_1.1))
mviPlot = ggplot(x = dataPlot$x) +
geom_line(y = data[,1]) +
geom_line(y = data[,2])
mviPlot
i = 1
dataPlot = cbind(X[,i], Xmvi[i]) %>% add_column(x = 1:nrow(X))
mviPlot = ggplot(x = dataPlot$x) +
geom_line(y = data[,1])
# geo
plotFunction = function(X1, X2, i){
dataPlot = cbind(X1[,i], X2[i]) %>% add_column(x = 1:nrow(X))
colnames(dataPlot) = c("var1", "var2", "x")
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(y = var1))  +
geom_line(aes(y = var2))
mviPlot
}
plotFunction(X1 = X, X2 = Xvmi, i = 1)
Xmvi
plotFunction(X1 = X, X2 = Xmvi, i = 1)
plotFunction = function(X1, X2, i){
dataPlot = cbind(X1[,i], X2[i]) %>% add_column(x = 1:nrow(X))
colnames(dataPlot) = c("var1", "var2", "x")
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(y = var1), color = "darkred")  +
geom_line(aes(y = var2), color = "steelblue", lintype = "twodash")
mviPlot
}
plotFunction(X1 = X, X2 = Xmvi, i = 1)
?gather
apply(X, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
merge(1,2)
merge(c(1,2), c(3,4))
# Checking MVI performance
i = 361
plotFunction = function(X1, X2, i){
dataPlot = cbind(X1[,i], X2[i]) %>% add_column(x = 1:nrow(X))
colnames(dataPlot) = c("var1", "var2", "x")
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(y = var1), color = "darkred")  +
geom_line(aes(y = var2), color = "steelblue", lintype = "twodash")
mviPlot
}
plotFunction(X1 = X, X2 = Xmvi, i = 1)
plotFunction(X1 = X, X2 = Xmvi, i = 361)
View(X)
X[,361]
X[,361] %>% as.vector()
Xmvi[,361] %>% as.vector()
dataPlot = cbind(X[,i], Xmvi[i]) %>% add_column(x = 1:nrow(X))
colnames(dataPlot) = c("var1", "var2", "x")
View(dataPlot)
# Transform 0 to NAs
X[X <= 0] = NA
is.na(X) %>%
sum()
# Identifying where the missing values are
apply(X, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
# Checking MVI performance
i = 361
dataPlot = cbind(X[,i], Xmvi[i]) %>% add_column(x = 1:nrow(X))
colnames(dataPlot) = c("var1", "var2", "x")
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(y = var1), color = "darkred")  +
geom_line(aes(y = var2), color = "steelblue", lintype = "twodash")
mviPlot
View(data)
View(dataPlot)
View(dataPlot)
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(y = var1), color = "darkred")
mviPlot
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(y = var1), color = "darkred")  +
geom_line(aes(y = var2), color = "steelblue", lintype = "twodash")
mviPlot
mviPlot = ggplot(dataPlot, aes(x = x)) +
geom_line(aes(y = var1), color = "darkred")
mviPlot
# MVI
Xmvi = X %>%
impute(methods = "RF")
# MVI
Xmvi = X %>%
impute(methods = "svdImpute")
View(Xmvi)
remove(xMVI)
remove(Xmvi)
# MVI
Xmvi = X %>%
impute(methods = "svdImpute")
View(Xmvi)
# Load data
data = read_xlsx("../Data_SparklingWines.xlsx")
X = data %>% select(-c(1:6))
Y = data$Style
dim(X)
# Check NAs
is.na(X) %>%
sum()
# Check null values
which(X == 0) %>%
length() %>%
sum()
# Transform 0 to NAs
X[X <= 0] = NA
is.na(X) %>%
sum()
# Identifying where the missing values are
apply(X, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
# Position missing values
apply(X, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
# MVI
Xmvi = X %>%
impute(methods = "svdImpute")
# scaleMethod(method = "autoscaling")
# MVI
Xmvi = X %>%
impute(methods = "KNNImpute")
# Removing columns with many missing values
X %>%
select(-529)
# Removing columns with many missing values
X %>%
select(-529)
# Removing columns with many missing values
X = X %>%
select(-529)
apply(X, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
# MVI
Xmvi = X %>%
impute(methods = "KNNImpute")
# MVI
Xmvi = X %>%
impute(methods = "KNNImpute")
View(X)
# MVI
Xmvi = X %>%
impute(., methods = "KNNImpute")
impute(X, methods = "KNNImpute")
# MVI
Xmvi = X %>%
as.matrix() %>%
impute(methods = "KNNImpute")
# MVI
Xmvi = X %>%
as.matrix() %>%
impute(methods = "KNNImpute")
remove(Xmvi)
# MVI
Xmvi = X %>%
as.matrix() %>%
impute(methods = "KNNImpute")
View(Xmvi)
View(X)
View(Xmvi)
# MVI
Xmvi = X %>%
as.matrix() %>%
impute(methods = "RF")
Xmvi = Xall
Xall = Xmvi
X = list()
X$original = data %>% select(-c(1:6))
# Load data
data = read_xlsx("../Data_SparklingWines.xlsx")
X = list()
X$original = data %>% select(-c(1:6))
Y = data$Style
dim(X)
dim(X$original)
# Check NAs
is.na(X$original) %>%
sum()
# Load data
data = read_xlsx("../Data_SparklingWines.xlsx")
X = list()
X$ini = data %>% select(-c(1:6))
Y = data$Style
dim(X$ini)
# Check NAs
is.na(X$ini) %>%
sum()
# Check null values
which(X$ini == 0) %>%
length() %>%
sum()
# Transform 0 to NAs
X$ini[X$ini <= 0] = NA
is.na(X$ini) %>%
sum()
# Transform 0 to NAs
X$ini[X$ini <= 0] = NA
is.na(X$ini) %>%
sum()
# Identifying where the missing values are
apply(X$ini, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
# Position missing values
apply(X, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
# Removing columns with many missing values
X$ini = X$ini %>%
select(-529)
# Load data
data = read_xlsx("../Data_SparklingWines.xlsx")
X = list()
X$ini = data %>% select(-c(1:6))
Y = data$Style
dim(X$ini)
# Check NAs
is.na(X$ini) %>%
sum()
# Check null values
which(X$ini == 0) %>%
length() %>%
sum()
# Transform 0 to NAs
X$ini[X$ini <= 0] = NA
is.na(X$ini) %>%
sum()
# Identifying where the missing values are
apply(X$ini, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
# Removing columns with many missing values
X$mv = X$ini %>%
select(-529)
View(X)
# MVI. Methods: RF, svdImpute, LLS, PPCA, KNNImpute. BPCA, min, halfmin, mean,
# zero
Xmvi = X %>%
as.matrix() %>%
impute(methods = "svdImpute")
# MVI. Methods: RF, svdImpute, LLS, PPCA, KNNImpute. BPCA, min, halfmin, mean,
# zero
Xmvi = X$mv %>%
as.matrix() %>%
impute(methods = "svdImpute")
libraries = c("readxl", "tidyverse", "dplyr", "ggplo2")
lapply(libraries, require, character.only = T)
# Load data
data = read_xlsx("../Data_SparklingWines.xlsx")
X = list()
X$ini = data %>% select(-c(1:6))
Y = data$Style
dim(X$ini)
# Check NAs
is.na(X$ini) %>%
sum()
# Check null values
which(X$ini == 0) %>%
length() %>%
sum()
# Transform 0 to NAs
X$ini[X$ini <= 0] = NA
is.na(X$ini) %>%
sum()
# Identifying where the missing values are
apply(X$ini, 2, function(X) {
X %>%
is.na() %>% sum()
}) %>%
as.vector()
# Removing columns with many missing values
X$mv = X$ini %>%
select(-529)
# MVI. Methods: RF, svdImpute, LLS, PPCA, KNNImpute. BPCA, min, halfmin, mean,
# zero
Xmvi = X$mv %>%
as.matrix() %>%
impute(methods = "svdImpute")
# MVI. Methods: RF, svdImpute, LLS, PPCA, KNNImpute. BPCA, min, halfmin,
# mean, zero
source(/C:/Users/josem/Google Drive/Github_Statistics/Pretreatments)
# MVI. Methods: RF, svdImpute, LLS, PPCA, KNNImpute. BPCA, min, halfmin,
# mean, zero
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments"
# MVI. Methods: RF, svdImpute, LLS, PPCA, KNNImpute. BPCA, min, halfmin,
# mean, zero
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/MVI.R"
# MVI. Methods: RF, svdImpute, LLS, PPCA, KNNImpute. BPCA, min, halfmin,
# mean, zero
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/MVI.R")
Xmvi = X$mv %>%
as.matrix() %>%
impute(methods = "svdImpute")
X$mvi = X$mv %>%
as.matrix() %>%
impute(methods = "svdImpute")
X$svd = X$mv %>%
as.matrix() %>%
impute(methods = "svdImpute")
libraries = c("readxl", "tidyverse", "dplyr", "ggplo2", "mixOmics")
lapply(libraries, require, character.only = T)
# Plot PCA before and after MVI
file.edit("/Users/josem/Google Drive/Functions/1. Scripts/2 PCA.R")
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Functions/col_pch.R")
# Plot PCA before and after MVI
pca(X, ncomp = 2) %>%
plotIndiv()
# Plot PCA before and after MVI
pca(X, ncomp = 2) %>%
plotIndiv()
# Plot PCA before and after MVI
pca(X, ncomp = 2) %>%
plotIndiv(object = .)
and after MVI
pca(X, ncomp = 2)
# Plot PCA before and after MVI
pca(X$mvi, ncomp = 2) %>%
plotIndiv(ob)
# Plot PCA before and after MVI
pca(X$mvi, ncomp = 2) %>%
plotIndiv(ob)
# Plot PCA before and after MVI
pca(X$mvi, ncomp = 2) %>%
plotIndiv()
# Plot PCA before and after MVI
pca(X$mvi, ncomp = 2) %>%
plotIndiv(.)
?plotIndiv
length(X)
X[[1]]
X[[2]]
multiplePCA = function(X, Y, mfrow){
source("/Users/josem/Google Drive/Functions/col_pch.R")
col.pch = col.pch(Y)
for (i in 1:length(X)) {
par(mfrow=mfrow)
pca(X, ncomp = 5, center = TRUE, scale = TRUE) %>%
plotIndiv(X[[i]], ind.names = F, group = Y, legend = TRUE, cex = 1.5, style = "graphics",
abline = TRUE, title = "", size.legend = 1.2, size.xlabel = 1.7, comp = comp, size.axis = 1.2,
size.title = 2, star = F, col = col.pch$col, pch = col.pch$pch)
}
}
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
X
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
par(mfrow=c(1,1))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
multiplePCA = function(X, Y, mfrow){
source("/Users/josem/Google Drive/Functions/col_pch.R")
col.pch = col.pch(Y)
for (i in 1:length(X)) {
par(mfrow=mfrow)
tiff("PCA_scores12.tiff", width = 6000, height = 5600, res = 600, compression = "lzw", pointsize = 12)
pca(X[[i]], ncomp = 2, center = TRUE, scale = TRUE) %>%
plotIndiv(., ind.names = F, group = Y, legend = TRUE, cex = 1.5, style = "graphics",
abline = TRUE, title = "", size.legend = 1.2, size.xlabel = 1.7, comp = c(1,2), size.axis = 1.2,
size.title = 2, star = F, col = col.pch$col, pch = col.pch$pch)
}
dev.off()
par(mfrow=c(1,1))
}
multiplePCA = function(X, Y, mfrow){
source("/Users/josem/Google Drive/Functions/col_pch.R")
col.pch = col.pch(Y)
for (i in 1:length(X)) {
par(mfrow=mfrow)
tiff("PCA_scores12.tiff", width = 6000, height = 5600, res = 600, compression = "lzw", pointsize = 12)
pca(X[[i]], ncomp = 2, center = TRUE, scale = TRUE) %>%
plotIndiv(., ind.names = F, group = Y, legend = TRUE, cex = 1.5, style = "graphics",
abline = TRUE, title = "", size.legend = 1.2, size.xlabel = 1.7, comp = c(1,2), size.axis = 1.2,
size.title = 2, star = F, col = col.pch$col, pch = col.pch$pch)
}
dev.off()
par(mfrow=c(1,1))
}
multiplePCA(X, Y, mfrow = c(2,2))
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
# Create the loop.vector (all the columns)
loop.vector <- 1:4
for (i in loop.vector) { # Loop over loop.vector
# store data in column.i as x
x <- examscores[,i]
# Plot histogram of x
hist(x,
main = paste("Question", i),
xlab = "Scores",
xlim = c(0, 100))
}
head(examscores)
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
?par
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
par("mar")
par(mar = c(1,1,1,1))
par("mar")
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
# Plot PCA before and after MVI
source("/Users/josem/Google Drive/Github_Statistics/Pretreatments/multiplePCA.R")
multiplePCA(X, Y, mfrow = c(2,2))
plot = multiplePCA(X, Y, mfrow = c(2,2))
plot
plot
plot(X)
plotIndiv(X)
plotIndiv(X$ini)
plotIndiv(X$svd)
X$svd
mode(X$svd)
